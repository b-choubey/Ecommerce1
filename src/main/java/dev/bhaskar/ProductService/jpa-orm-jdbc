what are ORM JPA JDBC

majorly source of data is data base
JPA and ORM will apply on relational databases

top most entity we have folder named "models"
then we created file like product and category
the inside we have class name product that contain id name price

normally we create one db for one microservice

package = database
class/models = table
attribute/class variable = column
objects = rows

steps to write code
1 connect to data base
2 write a query
ex select * from user u where u.id=1

1,anurag,+9
8111 this type of data set is known as csv or result set
where "," delimiter "CSV=comma separated value"

3 write to convert query result in user object

object relational mapping
ORM which will help us in mapping to object
tables = class/models
row = objects
it is concept or library

Hibernate is example of ORM
some other example Mybatis, JOOQ

for using hibernate
Instead of using hibernate directly we use interface which is implemented by hibernate
so we can change from hibernate to jooq easily
And the name of that interface is JPA java persistence api
next thing what we use to connect to data base
to connect database we use JDBC(java data base connector)
example mysql driver or postgres driver
-----------------------------------------------

now we will write repo
custom queries
writing native queries
we will add spring boot starter jpa dependencies
its a super package contain everything related to jpa
-----------------------------------------------
so after connecting to postgres and creating data with password 2428@Bha
we created a class name product in model
but the attribute that FakeStoreProductDTO and product is same so what differentiate
between product class and FakeStoreProductDTO class
and let spring know its different we use specific annotation
@Entity
we have to add id for that table as in product class we are telling spring to create table
now we have to annotate @Id which is our primary key

** Always code to interface not implementation
-----------------------------------------------
representing inheritance cardinalities custom query

JPA is auto generating tool
we have to make sure it support all use cases
int many to many we create mapping table
can i represent 1 to many or many to 1 by mapping table we can
for product and category part we dont need that
But jpa is created to support everything so it did both for us
added category id to product table and also created mapping table
mapping table also called lookup table named "category_products" although i dont
need so i will delete it

**if you want mapping table
**convention over configuration read this article
--------------------------------------------------
Fetch type and mapping
if product contain category, and also category contain product these
are known as 2 way mapping
if only one contain other than that is one way mapping
Now question is how you decide which one is to use one way mapping or two way mapping
it totally depend upon query pattern
for example
a-how many time if you select category and see the product inside it
b-how many times you gonna select a product and see which category its belong to
we will choose "a" we rarely open a product to see category
we will choose category contain list of product
why not both "a" and "b"
if we choose both and want to fetch product(which contain category) inside will fetch category
so in the process we made 2 data base call to fetch one product
it will impact the performance due to 2 way mapping
so we always prefer one way mapping
there is cases is for 2 way mapping but very few if "a"::"b" is approx 50 50
in one way mapping we will add category contain product
but product wont contain category.
-----------------------------------------------
Fetch type
we have two type of fetch type
1 eager 2 lazy
lets say we have 3 tables 1 category 2 product 3 review
 in eager loading if i fetch category it will load product and product will load review
 which all are not needed and will make fetching data slow
 while in lazy loading it wont load review  we only give surface level but when we ask for
 review then it will load review.
 in lazy it will load until or unless we specifically ask for it.
in lazy loading we have the review column but it wont fetch the data
the moment i wanted to see review it will fetch that by firing api for that
ideally we should never do eager loading we should always prefer lazy loading
-----------------------------------------------
